// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PRISM.API.Data;

#nullable disable

namespace PRISM.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240710184715_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PRISM.API.Models.Domain.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Difficulty");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3b3b61e-894d-4f41-a1b1-87efc5c526a4"),
                            Name = "Easy"
                        },
                        new
                        {
                            Id = new Guid("ffa84219-5315-46b6-a3c2-724c22fe5004"),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = new Guid("c3042129-aeb0-40fb-8406-74039e81e7f3"),
                            Name = "Hard"
                        });
                });

            modelBuilder.Entity("PRISM.API.Models.Domain.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("041e5528-e2a1-4864-b1dd-03358ca540f3"),
                            Code = "HNC",
                            Name = "Hà Nội",
                            RegionImageUrl = "https://picsum.photos/200/300"
                        },
                        new
                        {
                            Id = new Guid("98f959d9-7399-4f63-be6d-96d1f53bbda6"),
                            Code = "BNC",
                            Name = "Bắc Ninh",
                            RegionImageUrl = "https://picsum.photos/200/300"
                        },
                        new
                        {
                            Id = new Guid("23e92c3d-6c5a-467c-9c11-7a0cced1c9fb"),
                            Code = "HCM",
                            Name = "Hồ Chí Minh",
                            RegionImageUrl = "https://picsum.photos/200/300"
                        },
                        new
                        {
                            Id = new Guid("53030a9a-4557-40ca-8808-82c9a36d14bc"),
                            Code = "DNC",
                            Name = "Đà Nẵng",
                            RegionImageUrl = "https://picsum.photos/200/300"
                        },
                        new
                        {
                            Id = new Guid("ef49d302-eb51-4fed-be02-18885af45742"),
                            Code = "VTC",
                            Name = "Vũng Tàu",
                            RegionImageUrl = "https://picsum.photos/200/300"
                        });
                });

            modelBuilder.Entity("PRISM.API.Models.Domain.Walk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("LengthInKm")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalkImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("RegionId");

                    b.ToTable("Walks");
                });

            modelBuilder.Entity("PRISM.API.Models.Domain.Walk", b =>
                {
                    b.HasOne("PRISM.API.Models.Domain.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRISM.API.Models.Domain.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Region");
                });
#pragma warning restore 612, 618
        }
    }
}
